// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')



contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originMinerID = accounts[1]
    const originMinerName = "SA Mine"
    const diamondColor = "Pink"
    const diamondLength = "1.00"
    const diamondWidth = "1.30"
    const diamondCarat = "22"
    var diamondID = sku + upc
    const diamondNotes = "Best Diamond ever seen"
    const diamondPrice = web3.toWei(1, "ether")
    var itemState = 0
    const jewellerID = accounts[2]
    const certifierID = accounts[3]
    const finalOwnerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Miner: accounts[1] ", accounts[1])
    console.log("Jeweller: accounts[2] ", accounts[2])
    console.log("Certifier: accounts[3] ", accounts[3])
    console.log("FinalOwnerId: accounts[4] ", accounts[4])

    // 1st Test
    it("Testing smart contract function mineDiamond() that allows a miner to mind a diamond", async() => {
        const supplyChain = await SupplyChain.deployed()

        supplyChain.addMiner(accounts[1], {from: ownerID});
        supplyChain.addJeweller(accounts[2], {from: ownerID});
        supplyChain.addCertifier(accounts[3], {from: ownerID});
        supplyChain.addConsumer(accounts[4], {from: ownerID});
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event mineDiamond()
        var event = supplyChain.Mined()
        await event.watch((err, res) => {
            eventEmitted = true
        })

        // Mark an item as Harvested by calling function mineDiamond()
        await supplyChain.mineDiamond(upc,ownerID, originMinerID, originMinerName, diamondColor, diamondLength, diamondWidth, diamondCarat, diamondNotes, {from: originMinerID})

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], ownerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMinerID, 'Error: Missing or Invalid MinerID')
        assert.equal(resultBufferOne[4], diamondColor, 'Error: Missing or Invalid diamondColor')
        assert.equal(resultBufferOne[5], diamondLength, 'Error: Missing or Invalid diamondLength')
        assert.equal(resultBufferOne[6], diamondWidth, 'Error: Missing or Invalid diamondWidth')
        assert.equal(resultBufferOne[7], diamondCarat, 'Error: Missing or Invalid diamondCarat')
        assert.equal(resultBufferTwo[4], 0, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')        
    })    

    // 2nd Test
    it("Testing smart contract function putRawDiamondForSale() that allows miner to put diamond on sale", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event ForSale()
        var event = supplyChain.ForSale()
        await event.watch((err, res) => {
            eventEmitted = true
        })
      
          
        // Mark an item as Processed by calling function processtItem()
        await supplyChain.putRawDiamondForSale(upc, diamondPrice, {from: originMinerID})  
            

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        //const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[3], diamondPrice, 'Error: Invalid diamond Price')
        assert.equal(resultBufferTwo[4], 1, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')     
        
    })    

    // 3rd Test
    it("Testing smart contract function buyRawDiamond() that allows a jeweller to buy a diamond", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false
        
        // Watch the emitted event Sold()
        var event = supplyChain.Sold()
        await event.watch((err, res) => {
            eventEmitted = true
        })
          

        // Mark an item as Packed by calling function buyRawDiamond()
        await supplyChain.buyRawDiamond(upc,{from: jewellerID, value: diamondPrice, gasPrice: 0})
       

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], jewellerID, 'Error: Invalid Owner ID')
        assert.equal(resultBufferTwo[4], 2, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[6], jewellerID, 'Error: Invalid Jeweller ID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
        
    })    

    // 4th Test
    it("Testing smart contract function polishDiamond() that allows a jeweller  to polish the diamond", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Polished()
        var event = supplyChain.Polished()
        await event.watch((err, res) => {
            eventEmitted = true
        })
        
        

        // Mark an item as Polished by calling function polishDiamond()
        await supplyChain.polishDiamond(upc, {from: jewellerID})  
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        //const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], 3, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
          
    })    

    // 5th Test
    it("Testing smart contract function certifyDiamond() that allows a certifier to certify a diamond", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Certified()
        var event = supplyChain.Certified()
        await event.watch((err, res) => {
            eventEmitted = true
        })
        

        // Mark an item as certifyDiamond by calling function certifyDiamond()
        await supplyChain.certifyDiamond(upc, {from: certifierID})  

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[4], 4, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[7], certifierID,'Error: invalid certifier ID')
        assert.equal(eventEmitted, true, 'Invalid event emitted')  
        
    })    

    // 6th Test
    it("Testing smart contract function addDiamondForAuction() that allows a jeweller to put diamond for auction", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Certified()
        var event = supplyChain.ForAuction()
        await event.watch((err, res) => {
            eventEmitted = true
        })
        
 
        // Mark an item as forAuction by calling function addDiamondForAuction()        
        await supplyChain.addDiamondForAuction(upc,diamondPrice, {from: jewellerID})  
              

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[3], diamondPrice, 'Error: Invalid diamond Price')
        assert.equal(resultBufferTwo[4], 5, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')     
              
    })    

    //7th Test
    it("Testing smart contract function purchaseDiamond() that allows a customer to buy a diamond", async() => {
        const supplyChain = await SupplyChain.deployed()
        
        // Declare and Initialize a variable for event
        var eventEmitted = false

        // Watch the emitted event Purchased()
        var event = supplyChain.Purchased()
        await event.watch((err, res) => {
            eventEmitted = true
        })
            
      
        // Mark an item as Purchased by calling function purchaseDiamond()
        await supplyChain.purchaseDiamond(upc, {from: finalOwnerID, value: diamondPrice, gasPrice: 0}) 
        

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[2], finalOwnerID, 'Error: Invalid owner')
        assert.equal(resultBufferTwo[8], finalOwnerID, 'Error: Invalid final owner')
        assert.equal(resultBufferTwo[4], 6, 'Error: Invalid item State')
        assert.equal(eventEmitted, true, 'Invalid event emitted')     
             
    })    

    // 8th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], finalOwnerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], originMinerID, 'Error: Missing or Invalid originMinerID')
        assert.equal(resultBufferOne[4], diamondColor, 'Error: Missing or Invalid diamondColor')
        assert.equal(resultBufferOne[5], diamondLength, 'Error: Missing or Invalid diamondLength')
        assert.equal(resultBufferOne[6], diamondWidth, 'Error: Missing or Invalid diamondWidth')
        assert.equal(resultBufferOne[7], diamondCarat, 'Error: Missing or Invalid diamondCarat')
            
        
    
        
    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

               
        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], diamondID, 'Error: Missing or Invalid diamonID')
        assert.equal(resultBufferTwo[3], diamondPrice, 'Error: Missing or Invalid diamondPrice')
        assert.equal(resultBufferTwo[4],  6, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[5], diamondNotes, 'Error: Missing or Invalid diamondNotes')
        assert.equal(resultBufferTwo[6], jewellerID, 'Error: Missing or Invalid jewellerID')
        assert.equal(resultBufferTwo[7], certifierID, 'Error: Missing or Invalid certifierID')
        assert.equal(resultBufferTwo[8], finalOwnerID, 'Error: Missing or Invalid finalOnwerID')
          
         
    })

});

